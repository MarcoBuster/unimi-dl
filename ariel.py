from __future__ import annotations
import youtube_dl
import requests
import re
import logging
from os import listdir
from os import path
from interface_downloader import Downloader as DownloaderInterface

class ArielDownloader(DownloaderInterface):
    def __init__(self, email: str, password: str) -> None:
        super().__init__(email, password)

    def get_videos_page(self, url: str):
        with requests.Session() as s:
            login_url = 'https://elearning.unimi.it/authentication/skin/portaleariel/login.aspx?url=https://ariel.unimi.it/'

            #login
            payload               = {'hdnSilent': 'true'}
            payload['tbLogin']    = self.email
            payload['tbPassword'] = self.password
            logging.info(f'payload = {payload}')
            s.post(login_url, data=payload)
            return s.get(url)

    def get_videos(self, url) -> list[str]:
        manifest_regex = re.compile(r"https://.*/manifest\.m3u8")
        page           = self.get_videos_page(url)
        match          = manifest_regex.findall(page.text)

        logging.debug(match)
        return match

    def download(self, url: str, dst: str):
        """ Downloads the file associated with {manifest_url} in {dst_dir}/{filename}
            Filename is autogenerated by removing prefix and suffix from {manifest_url}
            Look at the code for more informations about the prefix and suffix removed."""
    #    prefix = videos_url.removeprefix("https://")
    #    prefix = prefix[:prefix.find(".")]
        filename = url.removeprefix("https://videolectures.unimi.it/vod/mp4:")
        filename = filename.removesuffix("/manifest.m3u8")
        filename = filename.replace('%','%%'); #escaping % for youtube-dl
        filename = path.join(dst, filename)
        logging.debug(f'Downloading {url} and saved as {filename}')
        #number = filename_number(prefix)
    #    filename = "unimi-dl_output/" + prefix + \
    #        "_" + number + '.%(ext)s'
        #  filename = prefix + filename_number(prefix) + '.%(ext)s'
        ydl_opts = {
            'nocheckcertificate': 'true',
            'restrictfilenames': 'true', 
            'outtmpl': filename,
            'logger': CustomLogger()
        }
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
            # print("downloading %s as %s" % (manifest, filename))

    def filename_number(self, prefix):
        ls = listdir("unimi-dl_output")
        file_regex = re.compile(prefix + r'_\d\d\d\.', re.IGNORECASE)
        number_regex = re.compile(r'\d+')
        retval = 1
        logging.info(ls)
        for file in ls:
            match = file_regex.match(file)
            if match:
                num = int(number_regex.search(match.group(0)).group(0))
                if num >= retval:
                    retval = num+1
        return '%03d' % retval

class CustomLogger:
    def __init__(self) -> None:
        self.logger = logging

    def debug(self, msg):
        logging.debug(msg)

    def warning(self, msg):
        logging.warning(msg)

    def error(self, msg):
        logging.error(msg)
