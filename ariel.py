from __future__ import annotations
from interface_downloader import Downloader as DownloaderInterface
from os import path
import logging
import re
import requests
import youtube_dl


class ArielDownloader(DownloaderInterface):
    def __init__(self, email: str, password: str) -> None:
        super().__init__(email, password)

    def get_videos_page(self, url: str) -> str:
        with requests.Session() as s:
            login_url = 'https://elearning.unimi.it/authentication/skin/portaleariel/login.aspx?url=https://ariel.unimi.it/'

            # login
            payload = {'hdnSilent': 'true'}
            payload['tbLogin'] = self.email
            payload['tbPassword'] = self.password
            s.post(login_url, data=payload)
            return s.get(url).text

    def get_videos(self, url: str) -> list[str]:
        manifest_regex = re.compile(r"https://.*/manifest\.m3u8")
        match = manifest_regex.findall(self.get_videos_page(url))

        logging.debug(f"match: {match}")
        return match

    def download(self, url: str, dst: str) -> None:
        """ Downloads the file associated with {manifest_url} in {dst_dir}/{filename}
            Filename is autogenerated by removing prefix and suffix from {manifest_url}
            Look at the code for more informations about the prefix and suffix removed."""
        filename = url.removeprefix("https://videolectures.unimi.it/vod/mp4:")
        filename = filename.removesuffix("/manifest.m3u8")
        filename = filename.replace('%', '%%')  # escaping % for youtube-dl
        filename = path.join(dst, filename)
        logging.info(f'Downloading {url} as {filename}')

        ydl_opts = {
            'nocheckcertificate': 'true',
            'restrictfilenames': 'true',
            'outtmpl': filename,
            'logger': self.CustomLogger()
        }
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

    class CustomLogger:
        def __init__(self) -> None:
            self.logger = logging

        def debug(self, msg) -> None:
            logging.debug(msg)

        def warning(self, msg) -> None:
            logging.warning(msg)

        def error(self, msg) -> None:
            logging.error(msg)
