# Copyright (C) 2021 Alessandro Clerici Lorenzini and Zhifan Chen.
#
# This file is part of unimi-dl.
#
# unimi-dl is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# unimi-dl is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with unimi-dl.  If not, see <https://www.gnu.org/licenses/>.


from __future__ import annotations
import logging
import re

import youtube_dl

from unimi_dl.ariel.ariel import get_ariel_session
from unimi_dl.downloader.interface_downloader import Downloader as DownloaderInterface


class PanoptoDownloader(DownloaderInterface):
    def __init__(self, email: str, password: str) -> None:
        self.logger = logging.getLogger(__name__)
        super().__init__(email, password)

    def get_videos(self, url: str) -> list[str]:
        self.logger.info("Ariel authentication")
        with get_ariel_session(self.email, self.password) as s:
            video_page = s.get(url, verify=False).text
            iframe_regex = re.compile(r"<iframe src=\"(.*?)\"")
            match = iframe_regex.search(video_page)
            iframe_url = match[1]

            self.logger.info("Panopto authentication")
            authurl = r"https://unimi.cloud.panopto.eu/Panopto/Pages/Auth/Login.aspx?instance=Labonline"
            s.get(authurl)

            manifest_page = s.get(iframe_url).text
            self.logger.info("Looking for manifests")
            manifest_regex = re.compile(r"\"VideoUrl\":\"(https:.*?\.m3u8)\"")
            match2 = manifest_regex.search(manifest_page)
            return [match2[1].replace("\\", "")]

    def download(self, url: str, dst: str) -> None:
        """ Downloads the file associated with {manifest_url} in {dst_dir}/{filename}
            Filename is autogenerated by removing prefix and suffix from {manifest_url}
            Look at the code for more informations about the prefix and suffix removed."""
        #  video_re = re.compile(r"mp4:(.*?)\.mp4")
        #  match = video_re.search(url)
        #  filename = match[1].replace("%", "%%")  # escaping % for youtube-dl
        #  filename = path.join(dst, filename)
        #  self.logger.info(f"Downloading {url} as {filename}")

        ydl_opts = {
            "v": "true",
            "nocheckcertificate": "true",
            "restrictfilenames": "true",
            #  "outtmpl": filename,
            "logger": logging.getLogger("youtube-dl")
        }
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
